"""
Django settings for hansfamily project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os 
import json 

with open('/etc/config.json') as config_file:
    config = json.load(config_file)



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-ls!d96sb)lh#k0u_l$&fx--qp2401471f@qonyv!b7s28cwpp&'
SECRET_KEY = config['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['www.hansfamily.xyz', 'hansfamily.xyz', '172.16.2.55', '61.101.55.157']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # user app
    'webui',
    'family',
    'study',
    'entertainment',
    'secret',
    'hans_ent',
    
    # 3rd party app
    'bootstrap4', # pip install django-bootstrap4
    'crispy_forms', # pip install django-crispy-forms
    'crispy_bootstrap4', # pip install django-crispy-forms
    'rest_framework',  # pip install djangorestframework
    'rest_framework.authtoken', 
    'rest_framework_simplejwt',
    'corsheaders',  # pip install django-cors-headers
    'djoser',  # $ pip install -U djoser
    'django_celery_results',  # pip install django-celery-results
    'django_celery_beat',  # pip install django-celery-beat
    'django_cleanup.apps.CleanupConfig', # pip install django-cleanup
]

# 리스트 등록하지 않지만 추가로 설치해야 하는것들
# pip install psycopg2
# pip install pillow
# pip install markdown 
# pip install django-filter  # Filtering support

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hansfamily.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hansfamily.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'hansfamily_1',
        'USER': 'hans',
        'PASSWORD': 'jason0506',
        'HOST': 'localhost',
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True
USE_L10N = True


# Timezone / Celery Beat Timezone
TIME_ZONE = 'Asia/Seoul'  # Set Django's timezone
# USE_TZ = False  # False 로 설정해야 DB에 변경 된 TIME_ZONE 이 반영 됨 
USE_TZ = True  # Keep time zone support enabled to ensure consistency
CELERY_TIMEZONE = 'Asia/Seoul'  # Set Celery timezone to match
CELERY_ENABLE_UTC = False  # Disable UTC



# # Live Settings for Static / Media
# # Static 
# STATIC_URL = '/static/'
# STATIC_ROOT = '/django-project/site/public/static'
# # Media 
# MEDIA_URL = '/media/'
# MEDIA_ROOT = '/django-project/site/public/media'


# Develop Settings for Static / Media
# Static
STATIC_URL = '/static/'
STATICFILES_DIRS = ["/django-project/site/public/static", ]
# Media
MEDIA_URL = '/media/'
MEDIA_ROOT = '/django-project/site/public/media'


# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static')]



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True 
EMAIL_HOST_USER = config.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = config.get('EMAIL_PASS')


CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'login'




# Large File Handling setting
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600000    # 100G upload size
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880000  # 50G upload size
DATA_UPLOAD_MAX_NUMBER_FILES = 10000

# DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760      # 10M upload size
# FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760    # 10M upload size
# DATA_UPLOAD_MAX_NUMBER_FILES = 100


# # Large File Handling setting
# DATA_UPLOAD_MAX_MEMORY_SIZE = None  # Unlimited upload size




FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

TIMEOUT = None  # Set your own timeout handling


# for Vue - Gunicorn - NGINX
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
# }


# for Celery

# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_BROKER_CONNECTION_RETRY = True
# CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# CELERY_TASK_SOFT_TIME_LIMIT = 300  # Set a time limit for each task (e.g., 5 minutes)

CELERY_WORKER_CONCURRENCY  = 150
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 60 * 60 * 24 * 7
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

# for Celery Results
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'

# Session Expire
SESSION_COOKIE_AGE = 36000  # 10 hour in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # the session to expire when the user closes their browser
SESSION_SAVE_EVERY_REQUEST = True  # session expiration time to reset every time the user makes a request
